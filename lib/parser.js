module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "comment": parse_comment,
        "comparator": parse_comparator,
        "condition": parse_condition,
        "document": parse_document,
        "expression": parse_expression,
        "function": parse_function,
        "identifier": parse_identifier,
        "list": parse_list,
        "list_contents": parse_list_contents,
        "logic": parse_logic,
        "logic_block": parse_logic_block,
        "logic_block_close": parse_logic_block_close,
        "logic_block_open": parse_logic_block_open,
        "logic_close": parse_logic_close,
        "logic_extends": parse_logic_extends,
        "logic_for": parse_logic_for,
        "logic_for_close": parse_logic_for_close,
        "logic_for_else": parse_logic_for_else,
        "logic_for_open": parse_logic_for_open,
        "logic_if": parse_logic_if,
        "logic_if_close": parse_logic_if_close,
        "logic_if_else": parse_logic_if_else,
        "logic_if_elsif": parse_logic_if_elsif,
        "logic_if_open": parse_logic_if_open,
        "logic_include": parse_logic_include,
        "logic_open": parse_logic_open,
        "number": parse_number,
        "path": parse_path,
        "print": parse_print,
        "quoted_string": parse_quoted_string,
        "raw_data": parse_raw_data,
        "start": parse_start,
        "white_space": parse_white_space
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_logic_extends();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          var result4 = parse_document();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e, d) {
            return [e].filter(function(n) { return !!n; }).concat(d);
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_document() {
        var cacheKey = 'document@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result5 = parse_raw_data();
        if (result5 !== null) {
          var result1 = result5;
        } else {
          var result4 = parse_logic();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_print();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_comment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result5 = parse_raw_data();
          if (result5 !== null) {
            var result1 = result5;
          } else {
            var result4 = parse_logic();
            if (result4 !== null) {
              var result1 = result4;
            } else {
              var result3 = parse_print();
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result2 = parse_comment();
                if (result2 !== null) {
                  var result1 = result2;
                } else {
                  var result1 = null;;
                };
              };
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_raw_data() {
        var cacheKey = 'raw_data@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[^{]/) !== null) {
          var result13 = input.charAt(pos);
          pos++;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("[^{]");
          }
        }
        if (result13 !== null) {
          var result8 = [];
          while (result13 !== null) {
            result8.push(result13);
            if (input.substr(pos).match(/^[^{]/) !== null) {
              var result13 = input.charAt(pos);
              pos++;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("[^{]");
              }
            }
          }
        } else {
          var result8 = null;
        }
        if (result8 !== null) {
          var savedPos3 = pos;
          if (input.substr(pos, 1) === "{") {
            var result11 = "{";
            pos += 1;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result11 !== null) {
            if (input.substr(pos).match(/^[^{%#]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("[^{%#]");
              }
            }
            if (result12 !== null) {
              var result10 = [result11, result12];
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
          var result9 = result10 !== null ? result10 : '';
          if (result9 !== null) {
            var result7 = [result8, result9];
          } else {
            var result7 = null;
            pos = savedPos2;
          }
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result3 = result7;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "{") {
            var result5 = "{";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result5 !== null) {
            if (input.substr(pos).match(/^[^{%#]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^{%#]");
              }
            }
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result3 = result4;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var savedPos2 = pos;
            if (input.substr(pos).match(/^[^{]/) !== null) {
              var result13 = input.charAt(pos);
              pos++;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("[^{]");
              }
            }
            if (result13 !== null) {
              var result8 = [];
              while (result13 !== null) {
                result8.push(result13);
                if (input.substr(pos).match(/^[^{]/) !== null) {
                  var result13 = input.charAt(pos);
                  pos++;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^{]");
                  }
                }
              }
            } else {
              var result8 = null;
            }
            if (result8 !== null) {
              var savedPos3 = pos;
              if (input.substr(pos, 1) === "{") {
                var result11 = "{";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"{\"");
                }
              }
              if (result11 !== null) {
                if (input.substr(pos).match(/^[^{%#]/) !== null) {
                  var result12 = input.charAt(pos);
                  pos++;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^{%#]");
                  }
                }
                if (result12 !== null) {
                  var result10 = [result11, result12];
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
              var result9 = result10 !== null ? result10 : '';
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result3 = result7;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "{") {
                var result5 = "{";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"{\"");
                }
              }
              if (result5 !== null) {
                if (input.substr(pos).match(/^[^{%#]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^{%#]");
                  }
                }
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(d) {
            var f = function(a) {
              return a.map(function(e) {
                if (typeof e == "object" && e instanceof Array) {
                  return f(e);
                } else {
                  return e;
                }
              }).join("");
            }
          
            return {
              type: "raw",
              data: f(d),
            };
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quoted_string() {
        var cacheKey = 'quoted_string@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^"\\]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"\\\\]");
            }
          }
          if (result9 !== null) {
            var result6 = result9;
          } else {
            if (input.substr(pos, 2) === "\\\"") {
              var result8 = "\\\"";
              pos += 2;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              if (input.substr(pos, 2) === "\\\\") {
                var result7 = "\\\\";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\\\\\\\"");
                }
              }
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^"\\]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\]");
              }
            }
            if (result9 !== null) {
              var result6 = result9;
            } else {
              if (input.substr(pos, 2) === "\\\"") {
                var result8 = "\\\"";
                pos += 2;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\\\\\"\"");
                }
              }
              if (result8 !== null) {
                var result6 = result8;
              } else {
                if (input.substr(pos, 2) === "\\\\") {
                  var result7 = "\\\\";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\\\\\\\\"");
                  }
                }
                if (result7 !== null) {
                  var result6 = result7;
                } else {
                  var result6 = null;;
                };
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return {
              type: "string",
              data: d.join("").replace(/\\/g, "\\"),
            };
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "-") {
          var result11 = "-";
          pos += 1;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        var result3 = result11 !== null ? result11 : '';
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result10 = input.charAt(pos);
            pos++;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result10 !== null) {
            var result4 = [];
            while (result10 !== null) {
              result4.push(result10);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result10 = input.charAt(pos);
                pos++;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result7 = ".";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result7 !== null) {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result9 !== null) {
                var result8 = [];
                while (result9 !== null) {
                  result8.push(result9);
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                var result8 = null;
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, p, d) {
            return {
              type: "number",
              data: parseFloat((s ? "-" : "") + p + "." + (d ? d[1] : 0)),
            };
          })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_list() {
        var cacheKey = 'list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "[") {
          var result3 = "[";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result3 !== null) {
          var result6 = parse_list_contents();
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result5 = "]";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(a) {
            return {
              type: "list",
              data: a,
            };
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_list_contents() {
        var cacheKey = 'list_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ",") {
            var result6 = ",";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          if (result6 !== null) {
            var result9 = parse_white_space();
            var result7 = result9 !== null ? result9 : '';
            if (result7 !== null) {
              var result8 = parse_expression();
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result9 = parse_white_space();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_expression();
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(f, o) {
            return [f].concat(o ? o.map(function(e) { return e ? e[2] : null; }).filter(function(e) { return !!e; }) : []);
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_white_space() {
        var cacheKey = 'white_space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[ \r\n]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[ \\r\\n]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[ \r\n]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[ \\r\\n]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return {
              type: "white_space",
              data: d.join(""),
            };
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z_0-9]");
            }
          }
          while (result7 !== null) {
            result4.push(result7);
            if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9]");
              }
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return {
              type: "identifier",
              name: d ? d.map(function(e) { return typeof e == "string" ? e : e.join(""); }).join("").replace(/\.$/, "") : [],
            };
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_path() {
        var cacheKey = 'path@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result7 = parse_identifier();
        if (result7 !== null) {
          var result3 = result7;
        } else {
          var savedPos1 = pos;
          var result5 = parse_identifier();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result3 = result4;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result7 = parse_identifier();
            if (result7 !== null) {
              var result3 = result7;
            } else {
              var savedPos1 = pos;
              var result5 = parse_identifier();
              if (result5 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result6 = ".";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(p) {
            return {
              type: "path",
              parts: p ? p.map(function(p) { return p.name; }) : [],
            };
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function() {
        var cacheKey = 'function@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_identifier();
        if (result3 !== null) {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "(") {
            var result6 = "(";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result6 !== null) {
            var result9 = parse_list_contents();
            var result7 = result9 !== null ? result9 : '';
            if (result7 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result8 = ")";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n, a) {
            return {
              type: "function",
              name: n,
              arguments: a ? a[1] : [],
            };
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "!") {
          var result15 = "!";
          pos += 1;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"!\"");
          }
        }
        if (result15 !== null) {
          var result17 = parse_white_space();
          var result16 = result17 !== null ? result17 : '';
          if (result16 !== null) {
            var result14 = [result15, result16];
          } else {
            var result14 = null;
            pos = savedPos3;
          }
        } else {
          var result14 = null;
          pos = savedPos3;
        }
        var result3 = result14 !== null ? result14 : '';
        if (result3 !== null) {
          var result13 = parse_quoted_string();
          if (result13 !== null) {
            var result4 = result13;
          } else {
            var result12 = parse_number();
            if (result12 !== null) {
              var result4 = result12;
            } else {
              var result11 = parse_list();
              if (result11 !== null) {
                var result4 = result11;
              } else {
                var result10 = parse_path();
                if (result10 !== null) {
                  var result4 = result10;
                } else {
                  var result9 = parse_function();
                  if (result9 !== null) {
                    var result4 = result9;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "|") {
              var result7 = "|";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_function();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "|") {
                var result7 = "|";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"|\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse_function();
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n, s, f) {
            return {
              source: s,
              negative: n ? true : false,
              filters: f ? f.map(function(f) { return f[1]; }) : [],
            };
          })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comparator() {
        var cacheKey = 'comparator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "==") {
          var result10 = "==";
          pos += 2;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"==\"");
          }
        }
        if (result10 !== null) {
          var result3 = result10;
        } else {
          if (input.substr(pos, 1) === "<") {
            var result9 = "<";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"<\"");
            }
          }
          if (result9 !== null) {
            var result3 = result9;
          } else {
            if (input.substr(pos, 1) === ">") {
              var result8 = ">";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            if (result8 !== null) {
              var result3 = result8;
            } else {
              if (input.substr(pos, 2) === "<=") {
                var result7 = "<=";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<=\"");
                }
              }
              if (result7 !== null) {
                var result3 = result7;
              } else {
                if (input.substr(pos, 2) === ">=") {
                  var result6 = ">=";
                  pos += 2;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">=\"");
                  }
                }
                if (result6 !== null) {
                  var result3 = result6;
                } else {
                  var result3 = null;;
                };
              };
            };
          };
        }
        if (result3 !== null) {
          var result4 = parse_white_space();
          if (result4 !== null) {
            var result5 = parse_expression();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t, e) {
            return {
              type: t,
              expression: e,
            };
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_condition() {
        var cacheKey = 'condition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expression();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = parse_white_space();
          if (result6 !== null) {
            var result7 = parse_comparator();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e, c) {
            return {
              source: e,
              comparison: c ? c[1] : null,
            };
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_print() {
        var cacheKey = 'print@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "{{") {
          var result3 = "{{";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{\"");
          }
        }
        if (result3 !== null) {
          var result9 = parse_white_space();
          var result4 = result9 !== null ? result9 : '';
          if (result4 !== null) {
            var result5 = parse_expression();
            if (result5 !== null) {
              var result8 = parse_white_space();
              var result6 = result8 !== null ? result8 : '';
              if (result6 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  var result7 = "}}";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e) {
            return {
              type: "print",
              expression: e,
            };
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "{#") {
          var result3 = "{#";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{#\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^#]/) !== null) {
            var result10 = input.charAt(pos);
            pos++;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("[^#]");
            }
          }
          if (result10 !== null) {
            var result6 = result10;
          } else {
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "#") {
              var result8 = "#";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"#\"");
              }
            }
            if (result8 !== null) {
              if (input.substr(pos).match(/^[^}]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("[^}]");
                }
              }
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^#]/) !== null) {
              var result10 = input.charAt(pos);
              pos++;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("[^#]");
              }
            }
            if (result10 !== null) {
              var result6 = result10;
            } else {
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "#") {
                var result8 = "#";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"#\"");
                }
              }
              if (result8 !== null) {
                if (input.substr(pos).match(/^[^}]/) !== null) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^}]");
                  }
                }
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 2) === "#}") {
              var result5 = "#}";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"#}\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) {
            return {
              type: "comment",
              data: d.join(""),
            };
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic() {
        var cacheKey = 'logic@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_logic_if();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_logic_for();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_logic_extends();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_logic_include();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_logic_block();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_open() {
        var cacheKey = 'logic_open@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "{%") {
          var result0 = "{%";
          pos += 2;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"{%\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_close() {
        var cacheKey = 'logic_close@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "%}") {
          var result0 = "%}";
          pos += 2;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"%}\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_if_open() {
        var cacheKey = 'logic_if_open@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_open();
        if (result3 !== null) {
          var result12 = parse_white_space();
          var result4 = result12 !== null ? result12 : '';
          if (result4 !== null) {
            if (input.substr(pos, 2) === "if") {
              var result5 = "if";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"if\"");
              }
            }
            if (result5 !== null) {
              var result11 = parse_white_space();
              var result6 = result11 !== null ? result11 : '';
              if (result6 !== null) {
                var result7 = parse_condition();
                if (result7 !== null) {
                  var result10 = parse_white_space();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse_logic_close();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
            return c;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_if_elsif() {
        var cacheKey = 'logic_if_elsif@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_open();
        if (result3 !== null) {
          var result12 = parse_white_space();
          var result4 = result12 !== null ? result12 : '';
          if (result4 !== null) {
            if (input.substr(pos, 5) === "elsif") {
              var result5 = "elsif";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"elsif\"");
              }
            }
            if (result5 !== null) {
              var result11 = parse_white_space();
              var result6 = result11 !== null ? result11 : '';
              if (result6 !== null) {
                var result7 = parse_condition();
                if (result7 !== null) {
                  var result10 = parse_white_space();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse_logic_close();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
            return c;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_if_else() {
        var cacheKey = 'logic_if_else@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_logic_open();
        if (result1 !== null) {
          var result7 = parse_white_space();
          var result2 = result7 !== null ? result7 : '';
          if (result2 !== null) {
            if (input.substr(pos, 4) === "else") {
              var result3 = "else";
              pos += 4;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"else\"");
              }
            }
            if (result3 !== null) {
              var result6 = parse_white_space();
              var result4 = result6 !== null ? result6 : '';
              if (result4 !== null) {
                var result5 = parse_logic_close();
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_if_close() {
        var cacheKey = 'logic_if_close@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_logic_open();
        if (result1 !== null) {
          var result7 = parse_white_space();
          var result2 = result7 !== null ? result7 : '';
          if (result2 !== null) {
            if (input.substr(pos, 5) === "endif") {
              var result3 = "endif";
              pos += 5;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"endif\"");
              }
            }
            if (result3 !== null) {
              var result6 = parse_white_space();
              var result4 = result6 !== null ? result6 : '';
              if (result4 !== null) {
                var result5 = parse_logic_close();
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_if() {
        var cacheKey = 'logic_if@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_if_open();
        if (result3 !== null) {
          var result4 = parse_document();
          if (result4 !== null) {
            var result5 = [];
            var savedPos3 = pos;
            var result12 = parse_logic_if_elsif();
            if (result12 !== null) {
              var result13 = parse_document();
              if (result13 !== null) {
                var result11 = [result12, result13];
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
            while (result11 !== null) {
              result5.push(result11);
              var savedPos3 = pos;
              var result12 = parse_logic_if_elsif();
              if (result12 !== null) {
                var result13 = parse_document();
                if (result13 !== null) {
                  var result11 = [result12, result13];
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var result9 = parse_logic_if_else();
              if (result9 !== null) {
                var result10 = parse_document();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              var result6 = result8 !== null ? result8 : '';
              if (result6 !== null) {
                var result7 = parse_logic_if_close();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, d, l, e) {
            var ls = [];
            for (var i = 0; i < l.length; i++) {
              ls.push({
                condition: l[i][0],
                action: l[i][1],
              });
            }
            return {
              type: "if",
              condition: c,
              action: d,
              elsifs: ls.length ? ls : null,
              else: e ? e[1] : null,
            };
          })(result1[0], result1[1], result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_for_open() {
        var cacheKey = 'logic_for_open@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_open();
        if (result3 !== null) {
          var result23 = parse_white_space();
          var result4 = result23 !== null ? result23 : '';
          if (result4 !== null) {
            if (input.substr(pos, 3) === "for") {
              var result5 = "for";
              pos += 3;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"for\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_white_space();
              if (result6 !== null) {
                var result7 = parse_identifier();
                if (result7 !== null) {
                  var savedPos2 = pos;
                  var result22 = parse_white_space();
                  var result17 = result22 !== null ? result22 : '';
                  if (result17 !== null) {
                    if (input.substr(pos, 1) === ",") {
                      var result18 = ",";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (reportMatchFailures) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result18 !== null) {
                      var result21 = parse_white_space();
                      var result19 = result21 !== null ? result21 : '';
                      if (result19 !== null) {
                        var result20 = parse_identifier();
                        if (result20 !== null) {
                          var result16 = [result17, result18, result19, result20];
                        } else {
                          var result16 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result16 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result16 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos2;
                  }
                  var result8 = result16 !== null ? result16 : '';
                  if (result8 !== null) {
                    var result9 = parse_white_space();
                    if (result9 !== null) {
                      if (input.substr(pos, 2) === "in") {
                        var result10 = "in";
                        pos += 2;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"in\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse_white_space();
                        if (result11 !== null) {
                          var result12 = parse_expression();
                          if (result12 !== null) {
                            var result15 = parse_white_space();
                            var result13 = result15 !== null ? result15 : '';
                            if (result13 !== null) {
                              var result14 = parse_logic_close();
                              if (result14 !== null) {
                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(k, v, s) {
            return {
              source: s,
              key: v ? k : null,
              value: v ? v[3] : k,
            };
          })(result1[4], result1[5], result1[9])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_for_else() {
        var cacheKey = 'logic_for_else@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_logic_open();
        if (result1 !== null) {
          var result7 = parse_white_space();
          var result2 = result7 !== null ? result7 : '';
          if (result2 !== null) {
            if (input.substr(pos, 4) === "else") {
              var result3 = "else";
              pos += 4;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"else\"");
              }
            }
            if (result3 !== null) {
              var result6 = parse_white_space();
              var result4 = result6 !== null ? result6 : '';
              if (result4 !== null) {
                var result5 = parse_logic_close();
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_for_close() {
        var cacheKey = 'logic_for_close@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_logic_open();
        if (result1 !== null) {
          var result7 = parse_white_space();
          var result2 = result7 !== null ? result7 : '';
          if (result2 !== null) {
            if (input.substr(pos, 6) === "endfor") {
              var result3 = "endfor";
              pos += 6;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"endfor\"");
              }
            }
            if (result3 !== null) {
              var result6 = parse_white_space();
              var result4 = result6 !== null ? result6 : '';
              if (result4 !== null) {
                var result5 = parse_logic_close();
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_for() {
        var cacheKey = 'logic_for@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_for_open();
        if (result3 !== null) {
          var result4 = parse_document();
          if (result4 !== null) {
            var savedPos2 = pos;
            var result8 = parse_logic_for_else();
            if (result8 !== null) {
              var result9 = parse_document();
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              var result6 = parse_logic_for_close();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c, d, e) {
            return {
              type: "for",
              config: c,
              action: d,
              else: e ? e[1] : null,
            };
          })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_block_open() {
        var cacheKey = 'logic_block_open@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_open();
        if (result3 !== null) {
          var result11 = parse_white_space();
          var result4 = result11 !== null ? result11 : '';
          if (result4 !== null) {
            if (input.substr(pos, 5) === "block") {
              var result5 = "block";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"block\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_white_space();
              if (result6 !== null) {
                var result7 = parse_expression();
                if (result7 !== null) {
                  var result10 = parse_white_space();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse_logic_close();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e) {
            return e;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_block_close() {
        var cacheKey = 'logic_block_close@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_logic_open();
        if (result1 !== null) {
          var result7 = parse_white_space();
          var result2 = result7 !== null ? result7 : '';
          if (result2 !== null) {
            if (input.substr(pos, 8) === "endblock") {
              var result3 = "endblock";
              pos += 8;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"endblock\"");
              }
            }
            if (result3 !== null) {
              var result6 = parse_white_space();
              var result4 = result6 !== null ? result6 : '';
              if (result4 !== null) {
                var result5 = parse_logic_close();
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_block() {
        var cacheKey = 'logic_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_block_open();
        if (result3 !== null) {
          var result6 = parse_document();
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            var result5 = parse_logic_block_close();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e, d) {
            return {
              type: "block",
              expression: e,
              content: d,
            }
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_extends() {
        var cacheKey = 'logic_extends@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_open();
        if (result3 !== null) {
          var result11 = parse_white_space();
          var result4 = result11 !== null ? result11 : '';
          if (result4 !== null) {
            if (input.substr(pos, 7) === "extends") {
              var result5 = "extends";
              pos += 7;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"extends\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_white_space();
              if (result6 !== null) {
                var result7 = parse_expression();
                if (result7 !== null) {
                  var result10 = parse_white_space();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse_logic_close();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e) {
            return {
              type: "extends",
              expression: e,
            };
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logic_include() {
        var cacheKey = 'logic_include@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_logic_open();
        if (result3 !== null) {
          var result11 = parse_white_space();
          var result4 = result11 !== null ? result11 : '';
          if (result4 !== null) {
            if (input.substr(pos, 7) === "include") {
              var result5 = "include";
              pos += 7;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"include\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_white_space();
              if (result6 !== null) {
                var result7 = parse_expression();
                if (result7 !== null) {
                  var result10 = parse_white_space();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse_logic_close();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e) {
            return {
              type: "include",
              expression: e,
            };
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
